import pydot

graph_dict = {
    12: [6],
    13: [6],
    14: [6],
    15: [6],
    16: [6],
    17: [1],
    18: [1],
    19: [1],
    20: [1],
    21: [1],
    22: [4],
    23: [4],
    24: [4],
    25: [4],
    26: [4],
    27: [3],
    28: [3],
    29: [3],
    30: [3],
    31: [1, 3],
    32: [2],
    33: [2],
    34: [2],
    35: [2],
    36: [2],
    37: [5],
    38: [5],
    39: [5],
    40: [5],
    41: [4, 5],
    42: [6, 11, 3, 10, 1, 2],
    43: [6, 8, 11, 42, 9, 1, 2],
    44: [5, 7, 9, 1, 4],
    45: [8, 5, 7, 44, 3, 10, 1, 4],
    46: [6, 11, 3, 10, 1, 4, 7],
    47: [6, 11, 5, 7, 2, 4],
    48: [6, 11, 45, 47, 8, 46, 7, 2, 4],
    49: [6, 8, 11, 5, 7],
    50: [6, 11, 5, 7, 43, 4, 10, 45, 2, 9, 1, 3],
    51: [6, 11, 5, 7, 43, 45, 50, 9, 2, 10, 1, 3],
    52: [9],
    53: [6, 11, 45, 49, 51, 8, 52, 46, 9, 1, 10, 2],
    54: [6, 10, 11, 1, 2],
    55: [6, 11, 45, 49, 53, 7, 5, 8, 54, 4, 9, 1, 2],
    56: [6, 11, 1, 10, 2, 7, 3, 4],
    57: [6, 11, 3, 10, 2],
    58: [6, 11, 56, 8, 57, 7, 2, 4],
    59: [9, 6, 11, 58, 8, 1, 10, 3],
    60: [8, 10, 1, 9, 3],
    61: [6, 7, 11, 59, 55, 10, 4, 8, 1, 2],
    62: [8, 10, 1, 3],
    63: [6, 11, 59, 55, 10, 60, 61, 62, 4, 7, 2, 9, 1, 3],
    64: [6, 11, 59, 55, 10, 60, 63, 9, 1, 2, 7, 3],
    65: [7, 3, 10, 2, 5],
    66: [7, 9, 65, 11, 2, 5],
    67: [7, 11, 4, 10, 2, 5],
    68: [7, 9, 3, 10, 4, 5],
    69: [7, 3, 10, 2, 4],
    70: [7, 11, 2, 5],
    71: [7, 8, 66, 67, 68, 69, 9, 70, 4, 10, 2, 5],
    72: [7, 8, 4, 10, 1, 2, 3],
    73: [7, 71, 72, 5, 9, 1, 10, 2, 3, 4],
    74: [7, 71, 73, 9, 1, 5, 8],
    75: [7, 2, 11, 71, 74, 10, 1, 9, 3, 4],
    76: [7, 9, 10, 71, 1, 11, 3, 5],
    77: [7, 9, 10, 5, 11, 1],
    78: [7, 71, 75, 10, 76, 4, 8, 77, 3, 11, 1, 5],
    79: [7, 71, 78, 11, 2, 10, 1, 9, 3, 5],
    80: [7, 71, 1, 10, 3, 4],
    81: [7, 9, 71, 79, 8, 80, 11, 3, 4],
    82: [7, 11, 3, 5],
    83: [7, 3, 10, 68, 71, 79, 8, 81, 5, 11, 1, 4],
    84: [7, 71, 81, 82, 83, 11, 5, 10, 1, 4],
    85: [7, 71, 1, 10, 4, 5],
    86: [7, 8, 81, 84, 9, 77, 85, 11, 4, 5],
    87: [7, 10, 3, 4],
    88: [7, 11, 71, 86, 78, 9, 87, 5, 8, 3, 4],
    89: [7, 8, 66, 79, 9, 82, 1, 10, 3, 5],
    90: [7, 71, 86, 79, 9, 88, 1, 10, 89, 4, 11, 3, 5],
    91: [11, 2],
    92: [1, 10, 85, 55, 9, 91, 5, 7, 2, 4],
    93: [90, 92, 9, 47, 10, 91, 5, 7, 2, 4],
    94: [90, 93, 7, 5, 11, 4, 10, 2, 6],
    95: [11, 4, 7, 2, 6],
    96: [9, 10, 1, 7, 4],
    97: [90, 6, 11, 2, 7],
    98: [90, 94, 10, 95, 96, 97, 9, 1, 7, 2, 4],
    99: [90, 6, 11, 64, 7, 2, 5],
    100: [90, 98, 9, 99, 10, 1, 7, 2, 5],
    101: [10, 1, 7, 2, 4],
    102: [90, 100, 9, 101, 6, 11, 56, 7, 2, 4],
    103: [7, 11, 2, 4],
    104: [10],
    105: [9, 11, 88, 103, 104, 2, 7, 4, 5],
    106: [11, 4, 7, 2, 5],
    107: [8, 90, 102, 11, 105, 6, 10, 106, 9, 2],
    108: [11, 2, 7, 107, 3, 10, 5, 6],
    109: [8, 90, 97, 10, 1, 7, 2, 3],
    110: [2, 10, 11, 5, 7, 3],
    111: [10, 90, 107, 110, 7, 3, 5],
    112: [7, 9, 1, 10, 5, 11, 3],
    113: [9, 5, 7, 1, 10, 3],
    114: [9, 90, 107, 108, 109, 111, 97, 8, 112, 2, 11, 113, 10, 1, 3],
    115: [10, 90, 6, 11, 64, 7, 3],
    116: [9, 90, 6, 11, 64, 7, 5],
    117: [9, 90, 107, 115, 116, 10, 3, 7, 1, 5],
    118: [9, 90, 107, 114, 8, 115, 117, 11, 5, 6, 7],
    119: [10, 11, 5, 7, 1, 9, 2, 4],
    120: [10, 11, 90, 107, 118, 119, 9, 1, 7, 2, 4],
    121: [10, 11, 90, 107, 118, 120, 8, 4, 7, 2, 5],
    122: [8, 11, 71, 114, 121, 6, 9, 2],
    123: [11, 5, 7, 2, 9, 107, 121, 6, 8, 1, 4],
    124: [11, 5, 7, 107, 118, 121, 122, 123, 8, 4, 6, 9],
    125: [11, 90, 107, 118, 121, 122, 124, 9, 6, 8, 2, 7, 1, 4],
    126: [9, 11, 2, 7, 1, 4],
    127: [11, 90, 107, 118, 122, 125, 8, 126, 6, 10, 4, 7, 1, 2],
    128: [9, 10, 90, 107, 3, 7, 2, 11, 4, 5],
    129: [10, 90, 107, 114, 4, 7, 3, 9, 1],
    130: [10, 90, 107, 114, 128, 129, 11, 1, 7, 2, 3],
    131: [9, 10, 90, 107, 3, 7, 1, 5],
    132: [10, 11, 2, 7, 5, 9, 3],
    133: [10, 90, 107, 114, 127, 128, 130, 8, 131, 132, 1, 7, 2, 3, 9, 5],
    134: [7, 10, 4, 11, 5, 9, 2, 3],
    135: [9, 10, 1, 11],
    136: [10, 90, 107, 118, 127, 133, 8, 131, 134, 135, 3, 7, 4, 11, 1, 5],
    137: [1, 10, 79, 107, 3, 7, 2, 11, 4],
    138: [9, 90, 107, 125, 136, 59, 8, 137, 11, 2, 7, 3, 4],
    139: [10, 90, 107, 118, 125, 3, 7, 138, 5, 11, 1, 9, 2, 6],
    140: [9, 90, 55, 8, 91, 5, 7, 2, 4],
    141: [8, 84, 114, 125, 130, 138, 139, 106, 140, 1, 10, 3, 7, 4, 5],
    142: [7, 5, 11, 2, 8, 4],
    143: [90, 107, 118, 125, 136, 138, 139, 140, 141, 55, 9, 142, 3, 10, 1, 11, 5, 7, 2, 4],
    144: [7, 2, 11, 6, 8, 4],
    145: [7, 9, 107, 144, 8, 4],
    146: [90, 107, 118, 125, 136, 143, 7, 3, 10, 145, 5, 11, 4, 8, 2, 6],
    147: [90, 97, 8, 114, 91, 5, 7, 2, 4],
    148: [90, 6, 11, 5, 7],
    149: [7, 2, 5],
    150: [90, 107, 118, 125, 136, 146, 9, 148, 8, 147, 10, 149, 1, 11, 2],
    151: [90, 107, 114, 130, 59, 63, 9, 137, 11, 2, 7, 3, 4],
    152: [7, 9, 2, 11, 4, 10, 3],
    153: [90, 107, 118, 127, 136, 150, 8, 151, 7, 152, 6, 11, 2, 4, 9],
    154: [7, 107, 118, 127, 153, 8, 134, 6, 11, 2, 4, 5],
    155: [9, 10, 90, 107, 3, 7, 4, 5],
    156: [10, 4, 7, 5, 9, 3],
    157: [10, 90, 107, 118, 127, 136, 8, 106, 128, 134, 155, 91, 156, 11, 2, 7, 3, 5],
    158: [11, 90, 107, 157, 6, 8, 113, 146, 10, 1, 3],
    159: [9, 90, 107, 157, 158, 4, 7, 3, 10, 59, 8],
    160: [11, 4, 7, 107, 150, 8, 2, 9, 3, 6],
    161: [4, 7, 107, 157, 159, 5, 11, 160, 10, 3, 9, 1, 6],
    162: [90, 107, 52, 136, 150, 10, 1, 3],
    163: [90, 107, 157, 159, 161, 11, 5, 7, 162, 8, 6, 9, 2],
    164: [7, 107, 125, 150, 8, 157, 59, 5, 11, 2, 4, 6],
    165: [90, 107, 157, 163, 10, 150, 8, 164, 3, 9],
    166: [90, 107, 157, 165, 11, 125, 10, 4, 7, 5, 9, 1, 6],
    167: [10, 11, 4, 7, 1, 2],
    168: [10, 4, 7, 107, 167, 3, 9, 1],
    169: [10, 90, 107, 167, 151, 8, 168, 11, 1, 9, 2, 3],
    170: [8, 10, 90, 167, 169, 7, 3, 4, 9],
    171: [7, 10, 4, 11, 107, 3, 9, 2, 6],
    172: [10, 90, 107, 170, 171, 59, 63, 9, 1, 3, 7, 4],
    173: [10, 90, 107, 170, 172, 11, 4, 6, 7, 1],
    174: [11, 4, 7, 2, 9, 6],
    175: [10, 90, 107, 170, 173, 8, 95, 174, 171, 59, 63, 9, 3, 7, 2, 4],
    176: [9, 90, 107, 157, 175, 165, 8, 153, 10, 3, 7, 1, 4],
    177: [90, 107, 157, 175, 166, 8, 6, 11, 63, 7, 4, 10],
    178: [90, 107, 157, 175, 166, 8, 153, 10, 177, 9, 176, 11, 1],
    179: [7, 10, 107, 3, 11, 5, 6],
    180: [9, 90, 107, 118, 10, 179, 55, 8, 1, 11, 3],
    181: [10, 90, 107, 180, 177, 8, 6, 11, 63, 7, 3, 5],
    182: [90, 107, 157, 180, 177, 8, 6, 11, 63, 7, 181, 2, 9, 3, 5],
    183: [7, 107, 118, 157, 178, 8, 150, 10, 145, 182, 9, 2, 3],
    184: [90, 107, 118, 157, 178, 8, 150, 10, 182, 9, 183, 1, 11, 2, 3],
    185: [11, 90, 107, 157, 180, 178, 8, 6, 9, 184, 10, 3],
    186: [90, 107, 157, 180, 178, 8, 182, 9, 184, 10, 185, 1, 7, 3, 5],
}

graph = pydot.Dot(graph_type='digraph', strict=True)

for i in range(1, max(graph_dict)+1):
    graph.add_node(pydot.Node(i))

for node, edges in graph_dict.items():
    for edge in edges:
        graph.add_edge(pydot.Edge(node, edge))
    
graph.write_png("output.png")


# def depth_of_each_node(graph):
#     depths = {}
#     for node in range(1,max(graph)+1):
#         depths[node] = depth_of_node(graph, node)
#     return depths

# def depth_of_node(graph, node):
#     if node not in graph:
#         return 0
#     return 1 + max(depth_of_node(graph, child) for child in graph[node])

# print(depth_of_each_node(graph_dict))

# graph = nx.DiGraph()
# for node, edges in graph_dict.items():
#     graph.add_edges_from((node, edge) for edge in edges)



# plt.figure(figsize=(16, 16))
# pos = nx.spring_layout(graph, k=1000)
# # nx.draw_networkx(graph, **options)
# options = {
#     "font_size": 5,
#     "node_size": 50,
#     "node_color": "white",
#     "edgecolors": "black",
#     "linewidths": 1,
#     "width": 1,
# }
# nx.draw_networkx(graph,pos, cmap=plt.get_cmap('jet'), node_size = 500)

# # plt.title(formula_to_string(formula))
# plt.axis("equal")
# plt.show()